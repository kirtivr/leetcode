from collections import OrderedDict

class Solution(object):
    def numIslands2(self, m, n, positions):
        """
        :type m: int
        :type n: int
        :type positions: List[List[int]]
        :rtype: List[int]
        """
        
        class Graph:
            def __init__(self,vertices):
                self.V = vertices
                self.graph = OrderedDict()

            def addEdge(self,u,v):
                self.graph[u].append(v)

            def addVertex(self,i):
                self.graph[i] = []
                
            def findParent(self,parent,i,skip=None):
 #               print(' ..paretn find '+str(i)+' = '+str(parent[i]))
                if parent[i] == -1 or parent[i] == i:
                    return i
                else:
                    if skip:
                        if parent[i] in skip:
                            skip.pop(parent[i],None)
                        if i in skip:
                            skip.pop(i,None)
                    return self.findParent(parent,parent[i])

            def union(self,parent,x,y):
                parent[x] = y
#                print('union '+str(x_set) + ' and ' + str(y_set))
                
            def getNumberOfIslands(self,m,n,positions):
                parent = {}
                print(self.graph)
                count = 0
                counts =[]
                for (i,j) in self.graph:
                        parent[(i,j)] = -1

                skip = {}
                
                for (i,j) in self.graph:
                    for (k,l) in self.graph[(i,j)]:
                        x = self.findParent(parent,(i,j),skip)
                        y = self.findParent(parent,(k,l),skip)
                        if x != y and x in skip:
                            skip.pop(x,None)
                        self.union(parent,x,y)

                    x = self.findParent(parent,(i,j),skip)
                    skip[x] = True
                    counts.append(len(skip))
                print(skip)
                return counts

        if len(positions) == 0:
            return []
        
        g = Graph((m)*(n))

        for k in range(len(positions)):
            [i,j] = positions[k]
            seen = positions[:k]
            g.addVertex((i,j))
            if i-1 >= 0 and [i-1,j] in seen:
                g.addEdge((i,j),(i-1,j))
            if i+1 < m and [i+1,j] in seen:
                g.addEdge((i,j),(i+1,j))
            if j+1 < n and [i,j+1] in seen:
                g.addEdge((i,j),(i,j+1))
            if j-1 < n and [i,j-1] in seen:
                g.addEdge((i,j),(i,j-1))

        return g.getNumberOfIslands(m,n,positions)
        
if __name__ == '__main__':
    m = 3
    n = 3
    positions = [[0,0], [0,1], [1,2], [2,1]]

#    m = 3
#    n = 3
#    positions =[[0,1],[1,2],[2,1],[1,0],[0,2],[0,0],[1,1]]
    m = 9
    n = 9
    positions = [[8,5],[8,0],[3,4],[0,3],[1,0],[5,4],[0,8],[5,7],[0,6],[6,2],[4,7],[2,7],[8,7],[8,6],[5,3],[2,3],[3,5],[3,1],[0,2],[8,8],[6,4],[0,1],[0,4],[7,5],[3,0]]
    
    m = 21
    n = 71
    positions = [[19,28],[14,38],[15,44],[17,12],[6,19],[11,69],[2,30],[7,43],[19,6],[7,29],[10,21],[17,55],[20,66],[12,28],[11,64],[12,52],[18,15],[2,52],[10,20],[0,50],[16,5],[17,25],[12,67],[6,45],[13,17],[5,55],[10,42],[20,17],[3,26],[20,61],[14,10],[9,1],[9,69],[6,29],[11,53],[3,66],[4,45],[12,65],[11,35],[5,67],[18,35],[2,57],[12,12],[13,53],[9,65],[13,0],[3,18],[13,39],[5,54],[20,43],[19,29],[17,37],[17,45],[3,38],[2,61],[2,65],[3,21],[5,40],[10,4],[12,36],[2,8],[3,33],[15,4],[13,35],[0,45],[20,29],[10,66],[19,7],[0,46],[19,11],[10,22],[19,0],[0,9],[2,20],[16,64],[10,37],[16,49],[4,20],[20,68],[10,38],[17,59],[15,54],[17,60],[19,18],[0,60],[9,62],[3,69],[10,44],[15,2],[14,44],[17,0],[18,42],[17,28],[11,10],[11,42],[11,67],[0,32],[8,0],[17,6],[7,26],[17,65],[17,66],[7,38],[8,17],[7,60],[0,16],[7,59],[18,8],[16,63],[7,0],[11,46],[0,7],[6,4],[2,63],[8,56],[18,18],[12,70],[2,15],[14,65],[13,52],[11,0],[10,48],[7,8],[11,44],[0,35],[4,64],[6,36],[16,17],[7,34],[1,33],[11,60],[17,11],[4,58],[4,9],[18,7],[15,40],[11,24],[17,3],[7,9],[1,38],[1,14],[15,21],[14,68],[14,69],[16,40],[5,60],[18,46],[15,51],[7,65],[1,34],[15,55],[19,63],[5,35],[20,9],[13,1],[20,69],[19,67],[17,44],[12,44],[10,49],[12,43],[14,21],[18,11],[11,9],[4,56],[6,70],[8,54],[1,55],[17,47],[18,38],[3,31],[16,37],[13,7],[15,6],[18,33],[4,60],[17,40],[7,3],[3,32],[13,41],[5,62],[17,4],[20,5],[15,32],[19,31],[8,69],[19,58],[3,35],[6,64],[0,37],[15,56],[6,46],[4,42],[4,51],[2,7],[7,13],[20,47],[10,29],[12,18],[20,52],[5,5],[12,34],[1,57],[7,32],[3,58],[14,29],[2,32],[2,46],[14,5],[3,9],[19,68],[18,16],[19,2],[6,23],[20,3],[10,69],[9,0],[0,13],[20,38],[6,14],[0,21],[6,50],[2,5],[1,20],[5,20],[1,5],[10,0],[7,6],[15,13],[8,21],[7,14],[9,9],[19,8],[13,25],[5,30],[1,16],[18,19],[16,44],[4,5],[15,37],[20,14],[20,8],[5,23],[13,44],[17,56],[13,62],[2,18],[1,58],[17,2],[20,40],[8,9],[8,52],[6,24],[19,65],[7,48],[20,51],[2,21],[7,39],[11,27],[7,22],[12,6],[19,12],[12,66],[0,55],[20,62],[11,20],[2,35],[2,0],[6,7],[5,41],[9,37],[8,44],[16,15],[9,48],[18,54],[19,52],[19,24],[19,46],[5,0],[19,50],[2,37],[18,31],[6,20],[4,59],[5,39],[9,38],[19,51],[3,67],[11,33],[7,57],[13,47],[20,64],[8,24],[13,69],[4,11],[4,46],[13,32],[18,3],[20,54],[18,17],[7,5],[15,12],[12,7],[6,11],[5,4],[17,26],[7,12],[12,68],[8,45],[8,2],[15,34],[12,20],[1,26],[6,54],[19,16],[0,17],[9,13],[4,65],[12,58],[11,52],[8,32],[18,32],[11,50],[9,50],[17,13],[11,17],[16,53],[18,26],[2,42],[14,58],[0,23],[19,44],[9,39],[15,47],[11,70],[10,35],[8,41],[15,39],[20,50],[2,50],[17,39],[1,28],[7,63],[16,61],[15,58],[19,17],[11,40],[20,46],[12,41],[6,32],[2,67],[4,52],[14,24],[0,43],[17,34],[6,56],[2,53],[1,69],[0,11],[16,48],[1,47],[14,12],[7,23],[8,37],[17,18],[7,27],[7,2],[10,63],[13,6],[3,23],[12,8],[1,52],[11,30],[9,57],[16,57],[9,58],[4,38],[18,36],[10,17],[20,24],[13,64],[18,37],[4,21],[17,33],[2,33],[15,10],[8,40],[14,52],[19,1],[2,45],[11,55],[3,40],[8,31],[20,57],[6,33],[6,22],[6,28],[2,11],[4,15],[4,31],[16,26],[9,27],[10,61],[5,52],[3,68],[0,19],[13,40],[0,52],[18,22],[1,24],[13,29],[12,33],[16,58],[19,66],[6,62],[18,40],[17,58],[2,34],[15,63],[8,23],[14,50],[20,16],[6,9],[8,1],[3,0],[20,10],[15,23],[1,0],[13,4],[8,25],[10,13],[12,9],[18,39],[3,24],[20,63],[16,39],[7,36],[15,65],[13,10],[19,20],[3,54],[12,35],[17,49],[17,31],[14,48],[18,65],[2,44],[9,51],[17,64],[16,36],[7,10],[5,9],[12,13],[6,59],[13,21],[8,14],[10,67],[20,56],[6,53],[18,25],[14,39],[8,70],[10,27],[0,48],[0,36],[12,56],[3,28],[15,14]]

    m = 51
    n = 86
    positions = [[33,41],[16,8],[27,32],[15,81],[29,35],[31,81],[26,60],[4,42],[15,80],[5,18],[30,84],[6,46],[18,15],[7,66],[34,14],[21,19],[7,85],[21,70],[9,34],[10,49],[45,83],[40,73],[32,18],[7,19],[2,4],[4,73],[37,57],[41,33],[35,25],[3,59],[44,3],[43,63],[32,1],[13,20],[23,23],[24,41],[25,43],[46,45],[50,72],[23,20],[14,12],[6,50],[1,2],[39,15],[39,30],[27,81],[9,81],[42,59],[24,84],[36,5],[32,22],[32,49],[42,12],[25,40],[44,1],[34,77],[23,14],[18,83],[35,15],[29,17],[26,53],[15,46],[35,4],[47,49],[12,19],[28,30],[24,37],[18,44],[19,19],[6,75],[40,75],[40,8],[8,59],[41,52],[14,14],[23,8],[38,4],[33,34],[37,62],[26,46],[50,57],[21,81],[3,12],[47,5],[22,53],[15,15],[3,68],[42,29],[20,84],[49,58],[19,55],[17,40],[47,19],[23,21],[28,57],[1,82],[13,59],[48,42],[48,0],[11,65],[6,71],[26,61],[7,41],[15,31],[43,1],[34,69],[9,2],[15,41],[40,77],[16,35],[16,48],[23,0],[7,64],[20,17],[0,47],[41,82],[45,62],[50,48],[30,38],[27,35],[19,29],[35,20],[36,23],[12,57],[13,46],[3,38],[45,25],[1,73],[13,72],[25,7],[2,58],[48,35],[37,84],[36,18],[16,76],[35,7],[6,35],[35,74],[12,76],[34,49],[29,46],[7,62],[2,41],[45,6],[22,3],[2,28],[19,36],[20,28],[46,85],[20,8],[47,72],[30,1],[41,70],[41,10],[19,26],[40,46],[26,40],[28,27],[3,52],[7,74],[0,41],[36,58],[11,52],[26,18],[23,56],[36,24],[8,34],[34,63],[11,67],[7,14],[45,31],[47,61],[44,34],[18,6],[3,63],[17,18],[9,70],[33,57],[10,40],[15,24],[37,4],[9,56],[41,31],[40,14],[28,21],[47,75],[34,23],[29,77],[48,3],[40,47],[40,36],[10,82],[38,13],[4,59],[7,72],[49,20],[9,65],[14,0],[11,57],[33,71],[2,75],[49,16],[22,59],[38,31],[15,72],[43,20],[24,6],[32,38],[18,17],[15,60],[1,50],[14,72],[21,62],[30,10],[43,28],[49,38],[30,33],[9,55],[22,50],[5,77],[37,63],[29,63],[7,2],[30,17],[48,70],[21,25],[31,71],[46,27],[49,53],[26,75],[20,34],[29,67],[46,14],[34,47],[13,10],[18,24],[29,45],[31,60],[41,68],[25,3],[4,69],[41,83],[33,16],[47,9],[48,71],[26,24],[16,52],[14,73],[34,84],[42,37],[26,12],[32,47],[35,83],[8,6],[31,15],[43,21],[15,57],[28,24],[34,53],[7,1],[5,29],[2,53],[13,74],[32,15],[44,48],[4,51],[7,73],[16,57],[44,23],[20,20],[9,11],[49,79],[31,47],[21,47],[32,2],[46,3],[2,29],[46,50],[38,62],[6,13],[46,44],[32,81],[15,54],[30,26],[12,72],[27,68],[9,78],[28,25],[3,77],[18,67],[44,75],[32,68],[31,36],[37,55],[22,55],[13,5],[37,2],[33,84],[32,7],[18,66],[27,18],[50,29],[28,32],[43,24],[21,71],[3,61],[49,46],[38,65],[17,74],[46,9],[44,26],[19,57],[49,7],[30,59],[15,75],[14,61],[14,25],[23,53],[14,54],[32,62],[10,35],[0,82],[41,30],[30,14],[32,77],[3,5],[31,28],[45,26],[12,66],[0,4],[30,32],[17,59],[33,62],[8,9],[4,41],[50,73],[20,42],[25,39],[41,37],[15,84],[40,44],[6,53],[22,54],[33,23],[31,53],[44,68],[31,59],[36,16],[27,19],[34,39],[29,40],[0,29],[44,52],[48,19],[3,23],[20,54],[7,4],[26,41],[22,17],[22,24],[37,8],[38,41],[29,51],[7,77],[50,80],[47,77],[6,78],[15,7],[9,52],[43,48],[17,6],[44,44],[39,17],[35,51],[12,23],[46,20],[15,74],[41,63],[12,67],[33,74],[43,2],[1,26],[34,24],[44,72],[36,6],[24,28],[9,14],[19,23],[18,39],[30,61],[32,21],[0,35],[17,27],[17,46],[45,35],[0,52],[22,52],[29,64],[44,32],[5,30],[20,19],[32,37],[49,59],[40,34],[42,51],[1,9],[5,71],[20,10],[15,43],[45,47],[27,67],[48,24],[40,55],[9,77],[35,71],[47,39],[13,36],[47,44],[38,69],[18,74],[42,27],[9,23],[31,5],[16,66],[24,67],[4,60],[40,70],[30,53],[37,21],[33,48],[17,16],[47,21],[36,63],[5,39],[10,83],[30,31],[48,30],[39,71],[41,22],[4,68],[38,53],[23,26],[15,38],[9,59],[33,80],[25,5],[38,78],[10,48],[46,6],[40,71],[8,73],[46,2],[25,19],[16,23],[38,44],[21,61],[1,76],[13,44],[34,50],[45,9],[13,34],[29,2],[35,10],[9,33],[22,58],[32,60],[10,72],[23,66],[24,5],[27,45],[7,22],[12,8],[38,77],[11,13],[33,7],[12,75],[33,9],[25,69],[34,20],[20,51],[40,78],[37,56],[26,43],[44,10],[35,58],[12,71],[4,58],[44,69],[42,6],[3,47],[18,51],[48,39],[41,67],[24,80],[5,26],[0,40],[47,53],[22,44],[30,76],[27,29],[43,53],[2,57],[38,3],[17,70],[36,57],[15,59],[19,45],[44,47],[25,28],[6,5],[10,79],[10,63],[0,50],[12,13],[43,49],[33,58],[49,36],[5,36],[46,79],[38,17],[27,54],[21,33],[49,35],[36,8],[26,59],[10,84],[1,39],[15,16],[50,40],[44,25],[35,62],[39,16],[23,59],[11,36],[45,85],[21,82],[0,25],[10,67],[42,57],[48,82],[36,28],[27,43],[43,74],[47,41],[49,6],[45,76],[5,15],[16,34],[47,0],[8,51],[49,72],[43,78],[26,48],[42,81],[18,69],[40,20],[43,7],[46,46],[32,12],[49,63],[38,40],[44,65],[28,47],[28,41],[11,54],[42,21],[38,64],[18,43],[28,37],[38,34],[37,17],[37,82],[18,58],[7,28],[10,27],[0,48],[26,74],[27,82],[26,82],[15,47],[13,38],[27,76],[27,80],[14,45],[15,32],[24,69],[23,45],[19,79],[42,3],[25,27],[14,59],[29,76],[2,35],[28,74],[16,39],[49,45],[31,84],[30,70],[46,19],[14,80],[0,51],[3,20],[30,55],[42,35],[44,24],[28,0],[44,63],[46,21],[32,31],[0,72],[20,75],[50,81],[37,39],[44,62],[49,77],[5,48],[17,8],[6,70],[49,47],[43,82],[17,47],[7,58],[12,64],[46,23],[34,68],[8,8],[26,29],[8,49],[15,4],[39,85],[34,30],[46,56],[4,8],[45,45],[0,28],[49,61],[6,84],[28,50],[34,46],[32,34],[20,52],[5,67],[50,41],[16,56],[1,70],[4,24],[14,9],[20,36],[21,77],[28,48],[7,83],[8,41],[2,7],[41,45],[7,68],[43,35],[3,67],[35,21],[30,54],[14,49],[46,59],[49,42],[28,73],[42,55],[43,76],[15,36],[12,7],[42,84],[37,13],[8,16]]
    print(Solution().numIslands2(m,n,positions))
