#!/usr/bin/env python
import time
import pdb
import sys
import copy
from typing import List, TypedDict

class LRUCache:

    def __init__(self, capacity: int):
        self.cache = {}
        

    def get(self, key: int) -> int:
        if key in self.cache:
            return self.cache[key]
        

    def put(self, key: int, value: int) -> None:
        


if __name__ == '__main__':
    x = Solution()
    start = time.time()
    print(x.minPathSum(grid))
    end = time.time()
    elapsed = end - start
    print (f'time elapsed = {elapsed}')
